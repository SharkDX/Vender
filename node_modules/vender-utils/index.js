var ffi = require('ffi');
var ref = require('ref');
var int = ref.types.int;
var string = ref.types.CString;

// On Windows they're UTF-16 (2-bytes), but on Unix platform they're UTF-32
// (4-bytes).
var wchar_size = process.platform == 'win32' ? 2 : 4

// Create a "wchar_t *" type. We use the "CString" type as a base since it's pretty
// close to what we actually want. We just have to define custom "get" and "set"
// functions and then we can use this type in FFI functions.
var wchar_t = Object.create(ref.types.CString)
wchar_t.get = function get (buf, offset) {
  var _buf = buf.readPointer(offset)
  console.log(_buf)
  if (_buf.isNull()) {
    return null
  }
  var stringBuf = _buf.reinterpretUntilZeros(wchar_size)
  console.log(stringBuf)
  return stringBuf.toString('utf16le') // TODO: decode UTF-32 on Unix
};
wchar_t.set = function set (buf, offset, val) {
  // TODO: better UTF-16 and UTF-32 encoding
  var _buf = new Buffer((val.length + 1) * wchar_size)
  _buf.fill(0)
  var l = 0
  for (var i = wchar_size - 1; i < _buf.length; i += wchar_size) {
    _buf[i] = val.charCodeAt(l++)
  }
  return buf.writePointer(_buf, offset)
};


var vender_utils = ffi.Library('node_modules\\vender-utils\\build\\Release\\vender-utils.dll', {
    "ResolveLnk": [string, [string]],
    "ExtractIconAsBase64": [string, [string]]
});

module.exports = vender_utils;